add_column(outcome="Crypto hold",.after="model")
x2a.1
# table with model fit indices for the regression based on imputed data
x1.1<-mice::pool(m1.1)$glanced[1,] %>%
add_column(model="m1.1",.before="null.deviance") %>%
add_column(outcome="Crypto hold",.after="model") %>%
add_column(value="none", .after="oucome")
x1.2<-mice::pool(m1.2)$glanced[1,] %>%
add_column(model="m1.2",.before="null.deviance") %>%
add_column(outcome="Crypto future",.after="model") %>%
add_column(value="none", .after="oucome")
x2a.1<-mice::pool(m2a.1)$glanced[1,] %>%
add_column(model="m2a.1",.before="null.deviance") %>%
add_column(outcome="Crypto hold",.after="model") %>%
add_column(value="OCH & SEN", .after="oucome")
# table with model fit indices for the regression based on imputed data
x1.1<-mice::pool(m1.1)$glanced[1,] %>%
add_column(model="m1.1",.before="null.deviance") %>%
add_column(outcome="Crypto hold",.after="model") %>%
add_column(value="none", .after="outcome")
x1.2<-mice::pool(m1.2)$glanced[1,] %>%
add_column(model="m1.2",.before="null.deviance") %>%
add_column(outcome="Crypto future",.after="model") %>%
add_column(value="none", .after="outcome")
x2a.1<-mice::pool(m2a.1)$glanced[1,] %>%
add_column(model="m2a.1",.before="null.deviance") %>%
add_column(outcome="Crypto hold",.after="model") %>%
add_column(value="OCH & SEN", .after="outcome")
x2a.1
x1.1<-mice::pool(m1.1)$glanced[1,] %>%
add_column(model="m1.1",.before="null.deviance") %>%
add_column(outcome="Crypto hold",.after="model") %>%
add_column(value="none", .after="outcome")
x1.2<-mice::pool(m1.2)$glanced[1,] %>%
add_column(model="m1.2",.before="null.deviance") %>%
add_column(outcome="Crypto future",.after="model") %>%
add_column(value="none", .after="outcome")
x2a.1<-mice::pool(m2a.1)$glanced[1,] %>%
add_column(model="m2a.1",.before="null.deviance") %>%
add_column(outcome="Crypto hold",.after="model") %>%
add_column(value="OCH & SEN", .after="outcome")
x2b.1<-mice::pool(m2b.1)$glanced[1,] %>%
add_column(model="m2b.1",.before="null.deviance") %>%
add_column(outcome="Crypto hold",.after="model") %>%
add_column(value="CON & STR", .after="outcome")
x2b.1
# table with model fit indices for the regression based on imputed data
x1.1<-mice::pool(m1.1)$glanced[1,] %>%
add_column(model="m1.1",.before="null.deviance") %>%
add_column(outcome="Crypto hold",.after="model") %>%
add_column(value="none", .after="outcome")
x1.2<-mice::pool(m1.2)$glanced[1,] %>%
add_column(model="m1.2",.before="null.deviance") %>%
add_column(outcome="Crypto future",.after="model") %>%
add_column(value="none", .after="outcome")
x2a.1<-mice::pool(m2a.1)$glanced[1,] %>%
add_column(model="m2a.1",.before="null.deviance") %>%
add_column(outcome="Crypto hold",.after="model") %>%
add_column(value="OCH & SEN", .after="outcome")
x2b.1<-mice::pool(m2b.1)$glanced[1,] %>%
add_column(model="m2b.1",.before="null.deviance") %>%
add_column(outcome="Crypto hold",.after="model") %>%
add_column(value="CON & STR", .after="outcome")
x2a.2<-mice::pool(m2a.2)$glanced[1,] %>%
add_column(model="m2a.2",.before="null.deviance") %>%
add_column(outcome="Crypto future",.after="model") %>%
add_column(value="OCH & SEN", .after="outcome")
x2b.2<-mice::pool(m2b.2)$glanced[1,] %>%
add_column(model="m2b.2",.before="null.deviance") %>%
add_column(outcome="Crypto future",.after="model") %>%
add_column(value="CON & STR", .after="outcome")
x2b.2
x3a.1<-mice::pool(m3a.1)$glanced[1,] %>%
add_column(model="m3a.1",.before="null.deviance") %>%
add_column(outcome="Crypto hold",.after="model") %>%
add_column(value="OCH & SEN", .after="outcome")
x3b.1<-mice::pool(m3b.1)$glanced[1,] %>%
add_column(model="m3b.1",.before="null.deviance") %>%
add_column(outcome="Crypto hold",.after="model") %>%
add_column(value="CON & STR", .after="outcome")
x3a.2<-mice::pool(m3a.2)$glanced[1,] %>%
add_column(model="m3a.2",.before="null.deviance") %>%
add_column(outcome="Crypto future",.after="model") %>%
add_column(value="OCH & SEN", .after="outcome")
x3b.2<-mice::pool(m3b.2)$glanced[1,] %>%
add_column(model="m3b.2",.before="null.deviance") %>%
add_column(outcome="Crypto future",.after="model") %>%
add_column(value="CON & STR", .after="outcome")
x3a.1
tbl_cryptonow <- full_join(x1.1,x2a.1,x2a.2)
tbl_cryptonow <- full_join(x1.1,x2a.1)
tbl_cryptonow
tbl_cryptonow <- full_join(x1.1,c(x2a.1,x2a.2))
tbl_cryptonow <- full_join(x1.1,x2a.1) %>% full_join(.,x2a.2)
tbl_cryptonow
tbl_cryptonow <- full_join(x1.1,x2a.1) %>% full_join(.,x2b.1) %>% full_join(.,x3a.1) %>% full_join(.,x3b.1)
tbl_cryptonow
mfit_cryptonow <- full_join(x1.1,x2a.1) %>% full_join(.,x2b.1) %>% full_join(.,x3a.1) %>% full_join(.,x3b.1)
mfit_cryptofutr <- full_join(x1.1,x2a.2) %>% full_join(.,x2b.2) %>% full_join(.,x3a.2) %>% full_join(.,x3b.2)
mfit_cryptofutr
mfit_cryptonow <- full_join(x1.1,x2a.1) %>% full_join(.,x2b.1) %>% full_join(.,x3a.1) %>% full_join(.,x3b.1)
mfit_cryptofutr <- full_join(x1.2,x2a.2) %>% full_join(.,x2b.2) %>% full_join(.,x3a.2) %>% full_join(.,x3b.2)
mfit_cryptonow
mfit_cryptofutr
save(list=c(str_subset(ls(),"t$"),
str_subset(ls(),"mfit$")),
file="data/table_logreg.Rdata")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(tidyverse)
library(viridis)
load("data/df.Rdata")
?str_subset
---
title: "Crypto exploratory visualization"
author: "Ranjit"
date: '2022-05-31'
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(tidyverse)
library(viridis)
load("data/df.Rdata")
```
# English labels
```{r}
df_ipst_relabeled <- df_ipst %>%
mutate(
krybws01 = krybws01 %>% as.numeric %>% recode_factor(
`1` = "Has heard of crypto currency",
`2` = "Has not heard of crypto currency"),
krybst01 = krybst01 %>% as.numeric %>% recode_factor(
`1` = "Currently holds crypto currency",
`2` = "Previously held crypto currency",
`3` = "Never held crypto currency"
),
krybsz01 = krybsz01 %>% as.numeric %>%  recode_factor(
`1` = "Wants to hold crypto currency in the future",
`2` = "Does not want to hold crypto currency in the future",
`3` = "Uncertain"
)
)
```
```{r}
df_long <- df_ipst_relabeled %>%
mutate(across(contains("kryb"), na_if, -77)) %>%
pivot_longer(cols = pvq_STR:pvq_OCH, names_to = "value_dim", values_to = "value_score") %>%
mutate(value_dim = factor(value_dim,
levels = c("pvq_STR", "pvq_SEN", "pvq_OCH", "pvq_CON"),
labels = c(
"Self-Transcendence",
"Self-Enhancement",
"Openness to Change",
"Conservation"
)))
df_long_z <- df_ipst_relabeled %>%
mutate(across(contains("kryb"), na_if, -77)) %>%
mutate(across(pvq_STR:pvq_OCH, scale)) %>%
pivot_longer(cols = pvq_STR:pvq_OCH, names_to = "value_dim", values_to = "value_score") %>%
mutate(value_dim = factor(value_dim,
levels = c("pvq_STR", "pvq_SEN", "pvq_OCH", "pvq_CON"),
labels = c(
"Self-Transcendence",
"Self-Enhancement",
"Openness to Change",
"Conservation"
)))
# Plotting function
plot_values <- function(data, target_var){
data %>%
mutate(crypto_var = get(target_var)) %>%
drop_na(crypto_var) %>%
group_by(value_dim, crypto_var) %>%
mutate(value_median = median(value_score),
value_mean = mean(value_score)) %>%
ggplot(aes(value_score, color = crypto_var), stat = "unique")+
facet_grid(rows = vars(value_dim), switch = "both", scales = "free_y")+
#geom_vline(xintercept = 0)+
geom_hline(yintercept = 0, color = "grey")+
geom_vline(xintercept = 0)+
geom_density(size = 1)+
#geom_point(aes(value_mean, color=crypto_var, y =0), stat = "unique", size = 3, shape = 17)+
geom_text(aes(value_median, color=crypto_var, y =0), stat = "unique", size = 8, label = "|")+
#geom_vline(aes(xintercept = value_median, color = crypto_var, linetype = "median"),               size = 1)+
#geom_vline(aes(xintercept = value_mean, color = crypto_var, linetype = "mean"),       size = 1)+
#scale_color_viridis("", option = "turbo", discrete = T, begin = 0.2, end = 0.8)+
theme_minimal(base_size = 16)+
xlab("Value Scores")+
theme(
legend.position = "bottom",
legend.direction = "vertical",
axis.text.y = element_blank(),
axis.title.y = element_blank(),
strip.text.y.left = element_text(angle = 0, hjust = 1),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()
)
}
```
# Value distributions
Median: "\|"
### Crypto awareness {.tabset}
#### raw values
All participants
```{r fig.height=5}
p1<-df_long %>%
plot_values("krybws01")
```
#### z-scores
All participants
```{r fig.height=5}
df_long_z %>%
plot_values("krybws01")
```
### Crypto posession (current / past) {.tabset}
#### raw values
Only those with awareness
```{r fig.height=5}
p2<-df_long %>%
filter(krybws01 == "Has heard of crypto currency")%>%
plot_values("krybst01")
```
#### z-scores
Only those with awareness
```{r fig.height=5}
df_long_z %>%
filter(krybws01 == "Has heard of crypto currency")%>%
plot_values("krybst01")
```
### Crypto posession (future) I {.tabset}
#### raw values
*N* = 692; Only those with awareness
```{r fig.height=5}
p3<-df_long %>%
filter(krybws01 == "Has heard of crypto currency")%>%
plot_values("krybsz01")
```
#### z-scores
*N* = 692; Only those with awareness
```{r fig.height=5}
df_long_z %>%
filter(krybws01 == "Has heard of crypto currency")%>%
plot_values("krybsz01")
```
### Crypto posession (future) II {.tabset}
#### raw values
*N* = 576; Only with awareness but no previous holding
```{r fig.height=5}
p4<-df_long %>%
filter(krybws01 == "Has heard of crypto currency",
krybst01 == "Never held crypto currency")%>%
plot_values("krybsz01")
```
#### z-scores
*N* = 576; Only with awareness but no previous holding
```{r fig.height=5}
df_long_z %>%
filter(krybws01 == "Has heard of crypto currency",
krybst01 == "Never held crypto currency")%>%
plot_values("krybsz01")
```
```{r}
library(stringr)
save(list=str_subset(ls(),"p$"),
file="data/plots.Rdata"
)
```
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(tidyverse)
library(viridis)
load("data/df.Rdata")
df_ipst_relabeled <- df_ipst %>%
mutate(
krybws01 = krybws01 %>% as.numeric %>% recode_factor(
`1` = "Has heard of crypto currency",
`2` = "Has not heard of crypto currency"),
krybst01 = krybst01 %>% as.numeric %>% recode_factor(
`1` = "Currently holds crypto currency",
`2` = "Previously held crypto currency",
`3` = "Never held crypto currency"
),
krybsz01 = krybsz01 %>% as.numeric %>%  recode_factor(
`1` = "Wants to hold crypto currency in the future",
`2` = "Does not want to hold crypto currency in the future",
`3` = "Uncertain"
)
)
df_long <- df_ipst_relabeled %>%
mutate(across(contains("kryb"), na_if, -77)) %>%
pivot_longer(cols = pvq_STR:pvq_OCH, names_to = "value_dim", values_to = "value_score") %>%
mutate(value_dim = factor(value_dim,
levels = c("pvq_STR", "pvq_SEN", "pvq_OCH", "pvq_CON"),
labels = c(
"Self-Transcendence",
"Self-Enhancement",
"Openness to Change",
"Conservation"
)))
df_long_z <- df_ipst_relabeled %>%
mutate(across(contains("kryb"), na_if, -77)) %>%
mutate(across(pvq_STR:pvq_OCH, scale)) %>%
pivot_longer(cols = pvq_STR:pvq_OCH, names_to = "value_dim", values_to = "value_score") %>%
mutate(value_dim = factor(value_dim,
levels = c("pvq_STR", "pvq_SEN", "pvq_OCH", "pvq_CON"),
labels = c(
"Self-Transcendence",
"Self-Enhancement",
"Openness to Change",
"Conservation"
)))
# Plotting function
plot_values <- function(data, target_var){
data %>%
mutate(crypto_var = get(target_var)) %>%
drop_na(crypto_var) %>%
group_by(value_dim, crypto_var) %>%
mutate(value_median = median(value_score),
value_mean = mean(value_score)) %>%
ggplot(aes(value_score, color = crypto_var), stat = "unique")+
facet_grid(rows = vars(value_dim), switch = "both", scales = "free_y")+
#geom_vline(xintercept = 0)+
geom_hline(yintercept = 0, color = "grey")+
geom_vline(xintercept = 0)+
geom_density(size = 1)+
#geom_point(aes(value_mean, color=crypto_var, y =0), stat = "unique", size = 3, shape = 17)+
geom_text(aes(value_median, color=crypto_var, y =0), stat = "unique", size = 8, label = "|")+
#geom_vline(aes(xintercept = value_median, color = crypto_var, linetype = "median"),               size = 1)+
#geom_vline(aes(xintercept = value_mean, color = crypto_var, linetype = "mean"),       size = 1)+
#scale_color_viridis("", option = "turbo", discrete = T, begin = 0.2, end = 0.8)+
theme_minimal(base_size = 16)+
xlab("Value Scores")+
theme(
legend.position = "bottom",
legend.direction = "vertical",
axis.text.y = element_blank(),
axis.title.y = element_blank(),
strip.text.y.left = element_text(angle = 0, hjust = 1),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()
)
}
p1<-df_long %>%
plot_values("krybws01")
p2<-df_long %>%
filter(krybws01 == "Has heard of crypto currency")%>%
plot_values("krybst01")
p3<-df_long %>%
filter(krybws01 == "Has heard of crypto currency")%>%
plot_values("krybsz01")
p4<-df_long %>%
filter(krybws01 == "Has heard of crypto currency",
krybst01 == "Never held crypto currency")%>%
plot_values("krybsz01")
library(stringr)
save(list=str_subset(ls(),"p$"),
file="data/plots.Rdata"
)
load("data/plots.Rdata")
p1
library(stringr)
save(list=str_subset(ls(),"p$"),
file="data/plots.Rdata"
)
#### ---- creates plots
## uses Ranjits code
library(tidyverse)
library(viridis)
library(stringr)
# - loads data
load("data/df.Rdata")
# creates english labels
df_ipst_relabeled <- df_ipst %>%
mutate(
krybws01 = krybws01 %>% as.numeric %>% recode_factor(
`1` = "Has heard of crypto currency",
`2` = "Has not heard of crypto currency"),
krybst01 = krybst01 %>% as.numeric %>% recode_factor(
`1` = "Currently holds crypto currency",
`2` = "Previously held crypto currency",
`3` = "Never held crypto currency"
),
krybsz01 = krybsz01 %>% as.numeric %>%  recode_factor(
`1` = "Wants to hold crypto currency in the future",
`2` = "Does not want to hold crypto currency in the future",
`3` = "Uncertain"
)
)
# prepres data for plotting
df_long <- df_ipst_relabeled %>%
mutate(across(contains("kryb"), na_if, -77)) %>%
pivot_longer(cols = pvq_STR:pvq_OCH, names_to = "value_dim", values_to = "value_score") %>%
mutate(value_dim = factor(value_dim,
levels = c("pvq_STR", "pvq_SEN", "pvq_OCH", "pvq_CON"),
labels = c(
"Self-Transcendence",
"Self-Enhancement",
"Openness to Change",
"Conservation"
)))
# Plotting function
plot_values <- function(data, target_var){
data %>%
mutate(crypto_var = get(target_var)) %>%
drop_na(crypto_var) %>%
group_by(value_dim, crypto_var) %>%
mutate(value_median = median(value_score),
value_mean = mean(value_score)) %>%
ggplot(aes(value_score, color = crypto_var), stat = "unique")+
facet_grid(rows = vars(value_dim), switch = "both", scales = "free_y")+
#geom_vline(xintercept = 0)+
geom_hline(yintercept = 0, color = "grey")+
geom_vline(xintercept = 0)+
geom_density(size = 1)+
#geom_point(aes(value_mean, color=crypto_var, y =0), stat = "unique", size = 3, shape = 17)+
geom_text(aes(value_median, color=crypto_var, y =0), stat = "unique", size = 8, label = "|")+
#geom_vline(aes(xintercept = value_median, color = crypto_var, linetype = "median"),               size = 1)+
#geom_vline(aes(xintercept = value_mean, color = crypto_var, linetype = "mean"),       size = 1)+
#scale_color_viridis("", option = "turbo", discrete = T, begin = 0.2, end = 0.8)+
theme_minimal(base_size = 16)+
xlab("Value Scores")+
theme(
legend.position = "bottom",
legend.direction = "vertical",
axis.text.y = element_blank(),
axis.title.y = element_blank(),
strip.text.y.left = element_text(angle = 0, hjust = 1),
panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank()
)
}
# saves data and plotting function
save(list=c("df_long","plot_values"),
file="data/plots.Rdata")
#### ---- creates plots
## uses Ranjits code
library(tidyverse)
library(viridis)
library(stringr)
# - loads data
load("data/df.Rdata")
# creates english labels
df_ipst_relabeled <- df_ipst %>%
mutate(
krybws01 = krybws01 %>% as.numeric %>% recode_factor(
`1` = "Has heard of crypto currency",
`2` = "Has not heard of crypto currency"),
krybst01 = krybst01 %>% as.numeric %>% recode_factor(
`1` = "Currently holds crypto currency",
`2` = "Previously held crypto currency",
`3` = "Never held crypto currency"
),
krybsz01 = krybsz01 %>% as.numeric %>%  recode_factor(
`1` = "Wants to hold crypto currency in the future",
`2` = "Does not want to hold crypto currency in the future",
`3` = "Uncertain"
)
)
# prepres data for plotting
df_long <- df_ipst_relabeled %>%
mutate(across(contains("kryb"), na_if, -77)) %>%
pivot_longer(cols = pvq_STR:pvq_OCH, names_to = "value_dim", values_to = "value_score") %>%
mutate(value_dim = factor(value_dim,
levels = c("pvq_STR", "pvq_SEN", "pvq_OCH", "pvq_CON"),
labels = c(
"Self-Transcendence",
"Self-Enhancement",
"Openness to Change",
"Conservation"
)))
# saves data and plotting function
save(list=c("df_long","df_ipst_relabeled"),
file="data/plots.Rdata")
#### ---- creates plots
## uses Ranjits code
library(tidyverse)
library(viridis)
library(stringr)
# - loads data
load("data/df.Rdata")
# creates english labels
df_ipst_relabeled <- df_ipst %>%
mutate(
krybws01 = krybws01 %>% as.numeric %>% recode_factor(
`1` = "Has heard",
`2` = "Has not heard"),
krybst01 = krybst01 %>% as.numeric %>% recode_factor(
`1` = "Currently holds",
`2` = "Previously held",
`3` = "Never held"
),
krybsz01 = krybsz01 %>% as.numeric %>%  recode_factor(
`1` = "Wants to hold",
`2` = "Does not want to hold",
`3` = "Uncertain"
)
)
# prepres data for plotting
df_long <- df_ipst_relabeled %>%
mutate(across(contains("kryb"), na_if, -77)) %>%
pivot_longer(cols = pvq_STR:pvq_OCH, names_to = "value_dim", values_to = "value_score") %>%
mutate(value_dim = factor(value_dim,
levels = c("pvq_STR", "pvq_SEN", "pvq_OCH", "pvq_CON"),
labels = c(
"STR",
"SEN",
"OCH",
"CON"
)))
# saves data and plotting function
save(list=c("df_long","df_ipst_relabeled"),
file="data/plots.Rdata")
load("data/table_logreg.Rdata")
